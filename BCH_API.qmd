---
title: "Estadísticas del Banco Central de Honduras"
# subtitle: "2017-2022"
authors: 
    - Gabriela MArgoth López Gutierrez
    - Elvis Teodoro Casco Alfaro
institute: "Banco Central de Honduras"
execute:
  echo: false
crossref:
  fig-title: Gráfico     # (default is "Figure")
  tbl-title: Tabla     # (default is "Table")
  fig-prefix: Gráfico   # (default is "Figure")
  tbl-prefix: Tabla    # (default is "Table")
format:
  html:
    echo: false
    toc: true
    toc-depth: 7
    code-fold: false
    warnings: false
# format:
#  html:
#    logo: logo.png
#    toc: true
# format:
#     revealjs:
#         logo: logo_negro_15x15.png
        # toc: true
keep-ipynb: true
jupyter: python3
# engine: knitr
---

En este proceso se explica la forma en que pueden descargarse los datos disponibles en la [API](https://bchapi-am.developer.azure-api.net/) del Banco Central de Honduras (BCH), utilizando Python.

# Funciones

```{python}
import urllib.request, json
import pandas as pd
import polars as pl

from IPython.display import Markdown
from tabulate import tabulate

class bchapi():
    def __init__(self):
        self.idslist = None
        self.header = None

    #get_info descarga toda la información de las series disponibles en base a la estructura del url ingresado
    def get_info(self, url, hdr):
        self.header = hdr
        req = urllib.request.Request(url, headers=self.header)
        req.get_method = lambda: 'GET'
        response = urllib.request.urlopen(req)
        jsondata = response.read()
        bytes_data = jsondata
        data_str = bytes_data.decode('utf-8')
        data = json.loads(data_str)
        df = pd.read_json(json.dumps(data))
        self.idslist = df['Id'].unique()
        return df

    #graph descarga los valores en formato dataframe de la serie seleccionada en base al id
    def graph(self, id):
        import plotly.express as px
        id = self.idslist[idx]
        url = f'https://bchapi-am.azure-api.net/api/v1/indicadores/{id}/cifras'
        df = self.get_info(url, self.header)
        ts = pd.DataFrame(
            data = df['Valor'].values, 
            index = pd.DatetimeIndex(df['Fecha']))
        fig = px.line(
            ts, 
            title = df['Descripcion'].unique()[0],)
        fig.update_layout(
            autosize=False,
            width=800,
            height=500,
            template = 'plotly_white',
            showlegend=False)
        fig.update_xaxes(title=None)
        fig.update_yaxes(title=None)
        fig.show()

def res_nivel_1():
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    variable_2 = "Niv_Gr_3"
    df = df.group_by(variable_0
        ).agg(
            pl.col(variable_0).len().alias("N_Variables"),
            pl.col(variable_1).n_unique().alias("N_Subgrupos")
        ).sort(["N_Variables","N_Subgrupos",],descending=[True,True])
    print(str(df["N_Variables"].sum()) + " variables")
    print(str(df["Niv_Gr_1"].len()) + " grupos")
    print(str(df["N_Subgrupos"].sum()) + " subgrupos")
    return df

def res_nivel_2(nivel_1):
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    variable_2 = "Niv_Gr_3"
    df = df.filter(
            pl.col("Niv_Gr_1") == nivel_1,
        ).group_by(variable_0,variable_1
        ).agg(
            pl.col(variable_0).len().alias("N_Variables"),
            pl.col(variable_2).n_unique().alias("N_Niv_Gr_2")
        ).sort(["N_Variables","N_Niv_Gr_2",],descending=[True,True])
    print(str(df["N_Variables"].sum()) + " variables")
    print(str(df["Niv_Gr_1"].len()) + " grupos")
    print(str(df["N_Niv_Gr_2"].sum()) + " subgrupos")
    return df

def res_nivel_3(nivel_1,nivel_2,variable_2):
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    df = df.filter(
            pl.col("Niv_Gr_1") == nivel_1,
            pl.col("Niv_Gr_2") == nivel_2
        ).group_by(
            [variable_0,variable_1,variable_2]
        ).agg(
            # pl.col("Niv_Gr_1").len().alias("N_Niv_Gr_2"),
            pl.col("Niv_Gr_2").len().alias("N_Variables"),
        ).sort("N_Variables",descending=True)
    print(str(len(df)) + " subgrupos")
    # print(str(df["N_Niv_Gr_2"].sum()) + " niveles")
    print(str(df["N_Variables"].sum()) + " variables")
    return df

def res_nivel_4(nivel_1,nivel_2,variable_2,def_variable_2,variable_3):
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    df = df.filter(
            pl.col("Niv_Gr_1") == nivel_1,
            pl.col("Niv_Gr_2") == nivel_2,
            pl.col(variable_2) == def_variable_2,
        ).group_by(
            [variable_0,variable_1,variable_2,variable_3]
        ).agg(
            pl.col(variable_3).len().alias("N_Variables"),
        ).sort("N_Variables",descending=True)
    return df

def res_nivel_5(
    nivel_1,nivel_2,
    variable_2,def_variable_2,
    variable_3,variable_4):
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    df = df.filter(
            pl.col("Niv_Gr_1") == nivel_1,
            pl.col("Niv_Gr_2") == nivel_2,
            pl.col(variable_2) == def_variable_2,
            # pl.col(variable_3) == def_variable_3,
        ).group_by(
            [variable_0,variable_1,variable_2,variable_3,variable_4]
        ).agg(
            pl.col(variable_4).len().alias("N_Variables"),
        ).sort("N_Variables",descending=True)
    return df
```

```{python}
def res_nivel_6(
    nivel_1,nivel_2,
    variable_2,def_variable_2,
    variable_3,variable_4,variable_5):
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    df = df.filter(
            pl.col("Niv_Gr_1") == nivel_1,
            pl.col("Niv_Gr_2") == nivel_2,
            pl.col(variable_2) == def_variable_2,
            # pl.col(variable_3) == variable_3,
            # pl.col(variable_3) == def_variable_3,
        ).group_by(
            [variable_0,variable_1,variable_2,variable_3,variable_4,variable_5]
        ).agg(
            pl.col(variable_5).len().alias("N_Variables"),
        ).sort("N_Variables",descending=True)
    return df

def res_nivel_7(
    nivel_1,nivel_2,
    variable_2,def_variable_2,
    variable_3,variable_4,variable_5,variable_6):
    df = pl.DataFrame(df_all)
    variable_0 = "Niv_Gr_1"
    variable_1 = "Niv_Gr_2"
    df = df.filter(
            pl.col("Niv_Gr_1") == nivel_1,
            pl.col("Niv_Gr_2") == nivel_2,
            pl.col(variable_2) == def_variable_2,
            # pl.col(variable_3) == variable_3,
            # pl.col(variable_3) == def_variable_3,
        ).group_by(
            [variable_0,variable_1,variable_2,variable_3,variable_4,variable_5,variable_6]
        ).agg(
            pl.col(variable_5).len().alias("N_Variables"),
        ).sort("N_Variables",descending=True)
    return df

```

# Acceso a los Datos

Una vez que se crea el registro de usuario, se necesita obtener una clave (key), ejecutando una consulta al catálogo de indicadores. Favor sustituir en el código la clave actual por su clave asignada.

Para conocer los datos disponibles, se debe ejecutar una consulta al catálogo de indicadores, que contiene información sobre las series disponibles:

- Nombre (código)
- Descripción
- Periodicidad
- Grupo
- Correlativo del Grupo

Como ejemplo de la consulta que contiene todas las variables, se muestran los primeros cinco elementos:

```{python}
clave_asignada = "ff34cff7b0024ea39eb565fccb9f03b6" # Su clave asignada 
url = "https://bchapi-am.azure-api.net/api/v1/indicadores?formato=Json"
hdr ={'Cache-Control': 'no-cache',
      'clave': clave_asignada,}

dwld = bchapi()
dfmeta = dwld.get_info(url, hdr)
dfmeta.head()
```

# Descripción de los Datos

## Grupos

Las variables están categorizadas en 54 grupos. La nomenclatura utilizada permite dividir estos en cinco niveles, tomando en cuenta el separador (-). Se explicarán los mismos a continuacion, ordenando de acuerdo al número de niveles.

```{python}
# Agregar niveles de Descripción y Grupo
df_all = dfmeta
df_all[['Niv_Descr_1','Niv_Descr_2','Niv_Descr_3','Niv_Descr_4','Niv_Descr_5','Niv_Descr_6','Niv_Descr_7','Niv_Descr_8']] = df_all['Descripcion'].str.split(
    '-',expand=True)
df_all["Niv_Descr"] = df_all.notnull().sum(axis=1) - 6
df_all[
    ['Niv_Gr_1','Niv_Gr_2','Niv_Gr_3','Niv_Gr_4','Niv_Gr_5']]  = df_all['Grupo'].str.split('-',expand=True)
df_all["Niv_Gr"] = df_all.notnull().sum(axis=1) - 2
df_all = pl.DataFrame(df_all)
df_all.write_csv(
        "api/variables.csv",
        separator=";")

# Resumen por Grupo
variable = "Grupo"
res_grupo = df_all.group_by(variable
    ).agg(
    pl.col("Id").len().alias("N_Variables"),
    ).sort("N_Variables",descending=True)
print(str(res_grupo["N_Variables"].sum()) + " variables")
print(str(len(res_grupo)) + " grupos")
res_grupo = pd.DataFrame(res_grupo)
res_grupo.columns = ["Grupo","N_Variables"]
res_grupo[
    ['Niv_Gr_1','Niv_Gr_2','Niv_Gr_3','Niv_Gr_4','Niv_Gr_5']]  = res_grupo['Grupo'].str.split('-',expand=True)
res_grupo["Niv_Gr"] = res_grupo.notnull().sum(axis=1) - 2
res_grupo = res_grupo.sort_values(
    ["Niv_Gr","N_Variables"], 
    ascending=[False,False])
res_grupo = pl.DataFrame(res_grupo)
res_grupo.write_csv(
        "api/grupos.csv",
        separator=";")

res_grupo
```

Esta agrupación permite consolidar los archivos de acuerdo con el origen de los datos en la página web del BCH, que en su mayoría pueden consultarse en los [reportes dinámicos](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos).

- EOM = [Estadísticas de Operaciones Monetarias](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/operaciones-de-mercado-abierto)
- ESR = [Estadísticas del Sector Real](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/sector-real)
- ESE = [Estadísticas del Sector Externo](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/sector-externo)
- EMF = [Estadísiticas Monetarias y Financieras (Sector Fiscal)](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/sector-fiscal)
- EM = [Estadísticas Monetarias (TPM y RIN)](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/sector-monetario)
- ESP = [Estadísticas de Sistema de Pagos](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/sistema-de-pagos)
- EC = [Estadísticas de Tipo de Cambio](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/tipo-de-cambio)
- EP = [Estadísticas de Precios](https://www.bch.hn/estadisticas-y-publicaciones-economicas/reportes-dinamicos/precios)

```{python}
res = res_nivel_1()
res
```

A continuación se presentan los detalles del primer niivel de agregación, ordenados de acuerdo al número de variables que contienen.

### EOM = Estadísticas de Operaciones Monetarias

```{python}
res_nivel_2("EOM")
```

- OMA = Operaciones de Mercado Abierto

#### OMA = Operaciones de Mercado Abierto

```{python}
res_nivel_3("EOM","OMA","Niv_Gr_3")
```

###### 01 = Tasas de Rendimiento Diario de Valores Gubernamentales 

```{python}
res_nivel_4(
    "EOM","OMA",
    "Niv_Gr_3","01",
    "Niv_Descr_1")
```

Para ver todas las variables:

```{python}
res_nivel_5(
    "EOM","OMA",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_1").sort("Nombre")
```

###### 02 = Créditos (Niv_Descr_4 = 1-3) e Inversiones (Niv_Descr_4 = 4-6): Monto, Número de Solicitudes y Tasa

```{python}
res_nivel_4(
    "EOM","OMA",
    "Niv_Gr_3","02",
    "Niv_Descr_5")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EOM","OMA",
    "Niv_Gr_3","02",
    "Nombre","Niv_Descr_5","Niv_Descr_6").sort("Nombre")
```

###### 03 = Monto, Número de Operaciones y Tasa

```{python}
res_nivel_4(
    "EOM","OMA",
    "Niv_Gr_3","03",
    "Niv_Descr_5")
```

Para ver todas las variables:

```{python}
res_nivel_5(
    "EOM","OMA",
    "Niv_Gr_3","03",
    "Nombre","Niv_Descr_5").sort("Nombre")
```

###### 04 = Monto, Número de Operaciones y Tasa (Dólares - Lempiras)

```{python}
res_nivel_4(
    "EOM","OMA",
    "Niv_Gr_3",
    "04",
    "Niv_Descr_5")
```

```{python}
res_nivel_5(
    "EOM","OMA",
    "Niv_Gr_3","04",
    "Niv_Descr_5","Niv_Descr_6")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EOM","OMA",
    "Niv_Gr_3","04",
    "Nombre","Niv_Descr_5","Niv_Descr_6").sort("Nombre")
```

### ESR = Estadísticas del Sector Real

```{python}
res_nivel_2("ESR")
```

- COU = Cuadro de Oferta y Utilización
- CCI = Clasificación Cruzada Industria
- VAB = Valor Agregado Bruto
- PIBA = PIB Anual
- PIBT = PIB Trimestral
- ODA = Oferta y Demanda Agregada
- IMAE = Índice Mensual de la Actividad Económica

#### COU = Cuadro de Oferta y Utilización

```{python}
res_nivel_3("ESR","COU","Niv_Gr_3")
```

- CONSUMO INTERMEDIO
- OFERTA
- UTILIZACIÓN
- VALOR AGREGADO
- VALOR BRUTO DE PRODUCCIóN

```{python}
res_nivel_4(
    "ESR","COU",
    "Niv_Gr_3",
    "01",
    "Niv_Descr_1")
```

Si se quiere filtrar por las variables que se enumeraron:

```{python}
res_nivel_6(
    "ESR","COU",
    "Niv_Gr_3",
    "01",
    "Niv_Descr_1","Nombre","Descripcion").filter(pl.col("Niv_Descr_1") == "VALOR AGREGADO")
```

Para saber el contenido de todas las variables:

```{python}
res_nivel_6(
    "ESR","COU",
    "Niv_Gr_3",
    "01",
    "Niv_Descr_1","Nombre","Descripcion").sort("Descripcion")
```

#### CCI = Clasificación Cruzada Industria

```{python}
res_nivel_3("ESR","CCI","Niv_Descr_1")
```

- Valor Agregado
- Consumo Intermedio
- Producción

"Niv_Descr_2" es el NPH

```{python}
res_nivel_5(
    "ESR","CCI",
    "Niv_Gr_3",
    "01",
    "Niv_Descr_1","Niv_Descr_2")
```

"Niv_Descr_3" es la NAEH

```{python}
res_nivel_5(
    "ESR","CCI",
    "Niv_Gr_3",
    "01",
    "Niv_Descr_1","Niv_Descr_3")
```

Para saber el contenido de todas las variables:

```{python}
res_nivel_7(
    "ESR","CCI",
    "Niv_Gr_3",
    "01",
    "Nombre","Niv_Descr_1","Niv_Descr_2","Niv_Descr_3")
```

#### VAB = Valor Agregado Bruto

```{python}
res_nivel_3("ESR","VAB","Niv_Descr_4")
```

#### PIBA = PIB Anual

```{python}
res_nivel_3("ESR","PIBA","Niv_Descr_4")
```

#### PIBT = PIB Trimestral

```{python}
res_nivel_3("ESR","PIBT","Niv_Descr_4")
```

#### ODA = Oferta y Demanda Agregada

```{python}
res_nivel_3("ESR","ODA","Niv_Descr_4")
```

#### IMAE = Índice Mensual de la Actividad Económica

```{python}
res_nivel_3("ESR","IMAE","Niv_Descr_4")
```

### ESE = Estadísticas del Sector Externo

```{python}
res_nivel_2("ESE")
```

- DE = Deuda Externa
- CEB = Comercio Exterior de Bienes
- BP = Balanza de Pagos
- IES = Ingresos y Egresos de Servicios
- PII = Posición de Inversión Inernacional
- IED = Inversión Extranjera Directa

#### DE = Deuda Externa

```{python}
res_nivel_3("ESE","DE","Niv_Gr_3")
```

##### 01 - Deudor

```{python}
res_nivel_5(
    "ESE","DE",
    "Niv_Gr_3",
    "01",
    "Niv_Descr_1","Niv_Descr_2")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "ESE","DE",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_1","Niv_Descr_2").sort("Nombre")
```

##### 02 - Acreedor

```{python}
res_nivel_5(
    "ESE","DE",
    "Niv_Gr_3",
    "02",
    "Niv_Descr_1","Niv_Descr_2")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "ESE","DE",
    "Niv_Gr_3","02",
    "Nombre","Niv_Descr_1","Niv_Descr_2").sort("Nombre")
```

##### 03 - Acreedor

```{python}
res_nivel_4(
    "ESE","DE",
    "Niv_Gr_3",
    "03",
    "Niv_Descr_1")
```

- Banco Central
- Gobierno general
- Otras sociedades financieras
- Otros Sectores
- Saldo bruto de la deuda externa
- Sociedades no financieras

```{python}
res_nivel_5(
    "ESE","DE",
    "Niv_Gr_3",
    "03",
    "Niv_Descr_1","Niv_Descr_2"
    ).filter(
        pl.col("Niv_Descr_1") == "Banco Central")
```

- Asignación de Derechos especiales de giro
- Asignación de Derechos especiales de giro 
- Créditos y anticipos comerciales
- Créditos y anticipos comerciales 
- Moneda y depósitos
- Moneda y depósitos 
- Otros pasivos de deuda
- Otros pasivos de deuda 
- Préstamos
- Préstamos 
- Tí­tulos de deuda
- Tí­tulos de deuda 
- Saldo bruto de la deuda externa
- Saldo bruto de la deuda externa 

```{python}
res_nivel_4(
    "ESE","DE",
    "Niv_Gr_3",
    "03",
    "Niv_Descr_2")
```

Para ver todas las variables (Nota: el nivel de descripción sigue):

```{python}
df_all.filter(
    pl.col("Niv_Gr_1") == "ESE",
    pl.col("Niv_Gr_2") == "DE",
    pl.col("Niv_Gr_3") == "03")
```

##### 04 - Acreedor

- Gobierno general
- Banco Central
- Otros Sectores
- Otras sociedades financieras
- Sociedades no financieras
- Deuda externa total a corto plazo

```{python}
res_nivel_4(
    "ESE","DE",
    "Niv_Gr_3",
    "04",
    "Niv_Descr_1")
```

- A corto plazo según el vencimiento original
- A largo plazo exigible dentro de un año o antes
- Deuda externa total a corto plazo

```{python}
res_nivel_4(
    "ESE","DE",
    "Niv_Gr_3",
    "04",
    "Niv_Descr_2")
```

- Asignación de Derechos especiales de giro
- Moneda y depósitos
- Tí­tulos de deuda
- Préstamos
- Créditos y anticipos comerciales
- Otros pasivos de deuda
- Deuda externa total a corto plazo (según el vencimiento residual)


```{python}
res_nivel_4(
    "ESE","DE",
    "Niv_Gr_3",
    "04",
    "Niv_Descr_3")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "ESE","DE",
    "Niv_Gr_3",
    "04",
    "Nombre","Niv_Descr_1","Niv_Descr_2","Niv_Descr_3")
```


#### CEB = Comercio Exterior de Bienes

```{python}
res_nivel_3("ESE","CEB","Niv_Gr_3")
```

#### BP = Balanza de Pagos

```{python}
res_nivel_3("ESE","BP","Niv_Gr_3")
```

#### IES - Ingresos y Egresos de Servicios

```{python}
res_nivel_3("ESE","IES","Niv_Gr_3")
```

#### PII = Posición de Inversión Inernacional

```{python}
res_nivel_3("ESE","PII","Niv_Gr_3")
```

#### IED = Inversión Extranjera Directa

```{python}
res_nivel_3("ESE","IED","Niv_Gr_3")
```

### EMF = Estadísiticas Monetarias y Financieras

```{python}
res_nivel_2("EMF")
```

#### AMCC = Agregados Monetarios, Crédito y Captación

```{python}
res_nivel_3("EMF","AMCC","Niv_Gr_3").sort("Niv_Gr_3")
```

##### 01 

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","01",
    "Niv_Descr_5")
```

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","01",
    "Niv_Descr_6")
```
Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","AMCC",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_4","Niv_Descr_5","Niv_Descr_6").sort("Nombre")
```

##### 02 

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","02",
    "Niv_Descr_1")
```

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","02",
    "Niv_Descr_2")
```

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","02",
    "Niv_Descr_3")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","AMCC",
    "Niv_Gr_3","02",
    "Nombre","Niv_Descr_1","Niv_Descr_2","Niv_Descr_3").sort("Nombre")
```

##### 03 Crédito de los Bancos Comerciales

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","03",
    "Niv_Descr_1")
```

```{python}
res_nivel_5(
    "EMF","AMCC",
    "Niv_Gr_3","03",
    "Niv_Descr_2","Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","AMCC",
    "Niv_Gr_3","03",
    "Nombre","Niv_Descr_1","Niv_Descr_2","Niv_Descr_4").sort("Nombre")
```

##### 04 Crédito de los Bancos Comerciales

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","04",
    "Niv_Descr_1")
```

```{python}
res_nivel_5(
    "EMF","AMCC",
    "Niv_Gr_3","04",
    "Niv_Descr_2","Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","AMCC",
    "Niv_Gr_3","04",
    "Nombre","Niv_Descr_1","Niv_Descr_2","Niv_Descr_4").sort("Nombre")
```

##### 05 Saldo de Préstamos (Millones de Lempiras)

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","05",
    "Niv_Descr_1")
```

```{python}
res_nivel_5(
    "EMF","AMCC",
    "Niv_Gr_3","05",
    "Niv_Descr_1","Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","AMCC",
    "Niv_Gr_3","05",
    "Nombre","Niv_Descr_1","Niv_Descr_3","Niv_Descr_4").sort("Niv_Descr_4")
```

##### 06 Préstamos Nuevos (Flujos acumulados en millones de lempiras)

```{python}
res_nivel_4(
    "EMF","AMCC",
    "Niv_Gr_3","06",
    "Niv_Descr_1")
```

```{python}
res_nivel_5(
    "EMF","AMCC",
    "Niv_Gr_3","06",
    "Niv_Descr_1","Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","AMCC",
    "Niv_Gr_3","06",
    "Nombre","Niv_Descr_1","Niv_Descr_3","Niv_Descr_4").sort("Niv_Descr_4")
```

#### TI = Tasas de Interés

```{python}
res_nivel_3("EMF","TI","Niv_Gr_3").sort("Niv_Gr_3")
```

##### 01 

```{python}
res_nivel_4(
    "EMF","TI",
    "Niv_Gr_3","01",
    "Niv_Descr_1")
```
```{python}
res_nivel_5(
    "EMF","TI",
    "Niv_Gr_3","01",
    "Niv_Descr_1","Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_7(
    "EMF","TI",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_6","Niv_Descr_5","Niv_Descr_4").sort("Niv_Descr_4")
```

##### 02 

```{python}
res_nivel_4(
    "EMF","TI",
    "Niv_Gr_3","02",
    "Niv_Descr_1")
```
```{python}
res_nivel_5(
    "EMF","TI",
    "Niv_Gr_3","02",
    "Niv_Descr_1","Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EMF","TI",
    "Niv_Gr_3","02",
    "Nombre","Niv_Descr_4","Niv_Descr_5").sort("Niv_Descr_4")
```

##### 03 Tasas de Interés Anuales

```{python}
res_nivel_4(
    "EMF","TI",
    "Niv_Gr_3","03",
    "Niv_Descr_1")
```
```{python}
res_nivel_5(
    "EMF","TI",
    "Niv_Gr_3","03",
    "Niv_Descr_1","Niv_Descr_6")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EMF","TI",
    "Niv_Gr_3","03",
    "Nombre","Niv_Descr_6","Niv_Descr_5").sort("Niv_Descr_6")
```

#### PFS = Panorama de las Sociedades Financieras

```{python}
res_nivel_3("EMF","PFS","Niv_Gr_3").sort("Niv_Gr_3")
```

##### 01 Bancos Comerciales

```{python}
res_nivel_4(
    "EMF","PFS",
    "Niv_Gr_3","01",
    "Niv_Descr_1")
```
```{python}
res_nivel_5(
    "EMF","PFS",
    "Niv_Gr_3","01",
    "Niv_Descr_2","Niv_Descr_1")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EMF","PFS",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_2","Niv_Descr_1").sort("Nombre")
```

##### 02 Activos y Pasivos Externos

```{python}
res_nivel_4(
    "EMF","PFS",
    "Niv_Gr_3","02",
    "Niv_Descr_1")
```

```{python}
res_nivel_4(
    "EMF","PFS",
    "Niv_Gr_3","02",
    "Niv_Descr_2")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EMF","PFS",
    "Niv_Gr_3","02",
    "Nombre","Niv_Descr_1","Niv_Descr_2").sort("Niv_Descr_2")
```

#### EBM = Emisión y Base Monetaria

```{python}
res_nivel_3("EMF","EBM","Niv_Gr_3").sort("Niv_Gr_3")
```

```{python}
res_nivel_4(
    "EMF","EBM",
    "Niv_Gr_3","01",
    "Niv_Descr_4")
```
```{python}
res_nivel_5(
    "EMF","EBM",
    "Niv_Gr_3","01",
    "Niv_Descr_4","Niv_Descr_5")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EMF","EBM",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_4","Niv_Descr_5").sort("Nombre")
```

### ESP = Estadísticas de Sistema de Pagos

```{python}
res_nivel_2("ESP")
```

#### ACH = Operaciones de Crédito Compensadas en Ceproban y Liquidadas en BCH

```{python}
res_nivel_3("ESP","ACH","Niv_Gr_3").sort("Niv_Gr_3")
```

```{python}
res_nivel_4(
    "ESP","ACH",
    "Niv_Gr_3","01",
    "Niv_Descr_5")
```

```{python}
res_nivel_4(
    "ESP","ACH",
    "Niv_Gr_3","01",
    "Niv_Descr_6")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "ESP","ACH",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_5","Niv_Descr_6").sort("Nombre")
```

#### CCECH = Cheques Compensados en Ceproban y Liquidados en BCH

```{python}
res_nivel_3("ESP","CCECH","Niv_Gr_3").sort("Niv_Gr_3")
```

```{python}
res_nivel_4(
    "ESP","CCECH",
    "Niv_Gr_3","01",
    "Niv_Descr_5")
```

```{python}
res_nivel_4(
    "ESP","CCECH",
    "Niv_Gr_3","01",
    "Niv_Descr_6")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "ESP","CCECH",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_5","Niv_Descr_6").sort("Nombre")
```

### EM = Estadísticas Monetarias (TPM y RIN)

```{python}
res_nivel_2("EM")
```

#### RIN = Reservas Internacionales Netas

```{python}
res_nivel_3("EM","RIN","Niv_Gr_3").sort("Niv_Gr_3")
```

```{python}
res_nivel_4(
    "EM","RIN",
    "Niv_Gr_3","01",
    "Niv_Descr_4")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EM","RIN",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_4","Niv_Descr_5").sort("Niv_Descr_4")
```

#### TPM = Tasa de Política Monetaria

```{python}
res_nivel_3("EM","TPM","Niv_Gr_3").sort("Niv_Gr_3")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EM","TPM",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_1","Niv_Descr_2").sort("Niv_Descr_2")
```

### EC = Estadísticas Cambiarias

```{python}
res_nivel_2("EC")
```

#### TCR = Tipo de Cambio de Referencia

```{python}
res_nivel_3("EC","TCR","Niv_Gr_3").sort("Niv_Gr_3")
```

Para ver todas las variables:

```{python}
df_all.filter(pl.col("Nombre") == "EC-TCR-01")
```

#### TCN = Tipo de Cambio Nominal

```{python}
res_nivel_3("EC","TCN","Niv_Gr_3").sort("Niv_Gr_3")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EC","TCN",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_1","Niv_Descr_2").sort("Niv_Descr_2")
```

### EP = EStadísticas de Precios

```{python}
res_nivel_2("EP")
```

#### IPC  Índice de Precios al Consumidor

```{python}
res_nivel_3("EP","IPC","Niv_Gr_3").sort("Niv_Gr_3")
```

Para ver todas las variables:

```{python}
res_nivel_6(
    "EP","IPC",
    "Niv_Gr_3","01",
    "Nombre","Niv_Descr_2","Niv_Descr_4").sort("Niv_Descr_2")
```

## Nombre

El campo "Nombre" es un código que contiene hasta 8 niveles de agrupación (tomando en cuenta una separación por "-"), siendo los primeros 7 iguales a las definiciones del campo "Grupo".

```{python}
df_all.select(
    "Niv_Gr_1","Niv_Gr_2","Nombre",
    "Niv_Descr_1","Niv_Descr_2","Niv_Descr_3","Niv_Descr_4","Niv_Descr_5","Niv_Descr_6","Niv_Descr_7","Niv_Descr_8").sort("Niv_Gr_1")
```

## Periodicidad

```{python}
#| label: tbl-periodicidad
#| tbl-cap: Número de Variables por Periodicidad

# dfmeta = pl.DataFrame(dfmeta)
variable = "Periodicidad"
res = df_all.group_by(variable
    ).agg(
    pl.col("Periodicidad").len().alias("N_Variables"),
    # pl.col("Monto").sum().alias("Millones_USD")
    ).sort("N_Variables",descending=True)
pd.DataFrame(res).to_csv(
        "api/periodicidad.csv",
        sep=";")
print(str(res["N_Variables"].sum()) + " variables")
res
```

# Graficar una Variable por Id

```{python}
idx = 11517
dwld.graph(idx)
```
